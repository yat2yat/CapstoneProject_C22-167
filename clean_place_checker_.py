# -*- coding: utf-8 -*-
"""Clean Place Checker .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uMXG4DG1qC8FnwoHgJPsIGna5vfXgzf7

**Kelompok C22 - 167**


1.   Ahmad Hidayat - M318X0850
2.   Ahmad Rijal - M211X0421
3.   Meilia Tri Andari - M004Y0009
4.   Nia Famela Simanjuntak - M302Y0795

Project Self Checking Cleaner Street

# Import Library
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Input
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

"""#Data Preprocessing"""

TRAINING_DIR = "/content/drive/MyDrive//Colab Notebooks/DATASET/Garbage/training"
VALIDATION_DIR = "/content/drive/MyDrive//Colab Notebooks/DATASET/Garbage/validation"

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

batch_size = 32

train_datagen = ImageDataGenerator(
    rescale=1 / 255,
    rotation_range=20,
    zoom_range=0.15,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.15,
    horizontal_flip=True,
    fill_mode="nearest"
)

train_generator = train_datagen.flow_from_directory(TRAINING_DIR,
                                                    batch_size=batch_size,
                                                    class_mode='categorical',
                                                    target_size=(224, 224))

validation_datagen = ImageDataGenerator(rescale=1.0 / 255.0)

validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,
                                                                batch_size=10,
                                                                class_mode='categorical',
                                                                target_size=(224, 224))

"""# Modelling"""

pre_trained_model = MobileNetV2(weights="imagenet", include_top=False,
                                input_tensor=Input(shape=(224, 224, 3)))

for layer in pre_trained_model.layers:
    layer.trainable = False

last_output = pre_trained_model.output

x = tf.keras.layers.AveragePooling2D(pool_size=(7, 7))(last_output)
x = tf.keras.layers.Flatten(name="flatten")(x)
x = tf.keras.layers.Dense(128, activation="relu")(x)
x = tf.keras.layers.Dropout(0.5)(x)
x = tf.keras.layers.Dense(2, activation="softmax")(x)

model = tf.keras.models.Model(pre_trained_model.input, x)

model.summary()

int_lr = 1e-4
num_epochs = 20

optimizer = tf.optimizers.Adam(learning_rate=int_lr, decay=int_lr/num_epochs)
model.compile(optimizer=optimizer,
              loss='binary_crossentropy',
              metrics=['accuracy'])

"""#Training"""

H = model.fit(train_generator,
              steps_per_epoch=20,
              epochs=num_epochs,
              validation_data=validation_generator,
              validation_steps=3)

plt.style.use("ggplot")
plt.figure(figsize=(10, 5))
plt.plot(np.arange(0, num_epochs), H.history["loss"], label="training")
plt.plot(np.arange(0, num_epochs), H.history["val_loss"], label="validation")
plt.title("Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

plt.figure(figsize=(10, 5))
plt.plot(np.arange(0, num_epochs), H.history["accuracy"], label="training")
plt.plot(np.arange(0, num_epochs), H.history["val_accuracy"], label="validation")
plt.title("Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)

import os
clean = os.path.join('/content/drive/MyDrive//Colab Notebooks/DATASET/Garbage/training/clean')
dirty = os.path.join('/content/drive/MyDrive//Colab Notebooks/DATASET/Garbage/training/dirty')
print('Jumlah dataset clean: ', len(os.listdir(clean)))
print('Jumlah dataset dirty: ', len(os.listdir(dirty)))

import numpy as np
from google.colab import files
import keras.utils as image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Input
import matplotlib.pyplot as plt
import pathlib
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(224,224))
 
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
 
  classes = model.predict(images, batch_size=5)  
  print(fn)
  if classes[0][0]==1:
    print('Lingkungan Sudah Bersih')
  else:
      print('Lingkungan Masih Kotor. Perlu dibersihkan lagi!!')